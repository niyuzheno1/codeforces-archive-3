for more details please visit : https://codeforces.com/contest/1509/problems
Processing math: 100%



__

![](//codeforces.org/s/74912/images/codeforces-logo-with-telegram.png)

![In English](//codeforces.org/s/74912/images/flags/24/gb.png) ![По-
русски](//codeforces.org/s/74912/images/flags/24/ru.png)

  

Codeforces Round #715 (Div. 2)

The problem statement has recently been changed. View the changes.

×

A. Average Height

time limit per test

1 second

memory limit per test

256 megabytes

input

standard input

output

standard output

Sayaka Saeki is a member of the student council, which has n other members
(excluding Sayaka). The i-th member has a height of ai millimeters.

It's the end of the school year and Sayaka wants to take a picture of all
other members of the student council. Being the hard-working and perfectionist
girl as she is, she wants to arrange all the members in a line such that the
amount of photogenic consecutive pairs of members is as large as possible.

A pair of two consecutive members u and v on a line is considered photogenic
if their average height is an integer, i.e. au+av2 is an integer.

Help Sayaka arrange the other members to maximize the number of photogenic
consecutive pairs.

Input

The first line contains a single integer t (1≤t≤500) — the number of test
cases.

The first line of each test case contains a single integer n (2≤n≤2000)  — the
number of other council members.

The second line of each test case contains n integers a1, a2, ..., an
(1≤ai≤2⋅105)  — the heights of each of the other members in millimeters.

It is guaranteed that the sum of n over all test cases does not exceed 2000.

Output

For each test case, output on one line n integers representing the heights of
the other members in the order, which gives the largest number of photogenic
consecutive pairs. If there are multiple such orders, output any of them.

Example

Input

Copy

    
    
    4
    3
    1 1 2
    3
    1 1 1
    8
    10 9 13 15 3 16 9 13
    2
    18 9
    

Output

Copy

    
    
    1 1 2 
    1 1 1 
    13 9 13 15 3 9 16 10 
    9 18 
    

Note

In the first test case, there is one photogenic pair: (1,1) is photogenic, as
1+12=1 is integer, while (1,2) isn't, as 1+22=1.5 isn't integer.

In the second test case, both pairs are photogenic.

The problem statement has recently been changed. View the changes.

×

B. TMT Document

time limit per test

1 second

memory limit per test

256 megabytes

input

standard input

output

standard output

The student council has a shared document file. Every day, some members of the
student council write the sequence TMT (short for Towa Maji Tenshi) in it.

However, one day, the members somehow entered the sequence into the document
at the same time, creating a jumbled mess. Therefore, it is Suguru Doujima's
task to figure out whether the document has malfunctioned. Specifically, he is
given a string of length n whose characters are all either T or M, and he
wants to figure out if it is possible to partition it into some number of
disjoint subsequences, all of which are equal to TMT. That is, each character
of the string should belong to exactly one of the subsequences.

A string a is a subsequence of a string b if a can be obtained from b by
deletion of several (possibly, zero) characters.

Input

The first line contains an integer t (1≤t≤5000)  — the number of test cases.

The first line of each test case contains an integer n (3≤n<105), the number
of characters in the string entered in the document. It is guaranteed that n
is divisible by 3.

The second line of each test case contains a string of length n consisting of
only the characters T and M.

It is guaranteed that the sum of n over all test cases does not exceed 105.

Output

For each test case, print a single line containing YES if the described
partition exists, and a single line containing NO otherwise.

Example

Input

Copy

    
    
    5
    3
    TMT
    3
    MTT
    6
    TMTMTT
    6
    TMTTTT
    6
    TTMMTT
    

Output

Copy

    
    
    YES
    NO
    YES
    NO
    YES
    

Note

In the first test case, the string itself is already a sequence equal to TMT.

In the third test case, we may partition the string into the subsequences
TMTMTT. Both the bolded and the non-bolded subsequences are equal to TMT.

The problem statement has recently been changed. View the changes.

×

C. The Sports Festival

time limit per test

1 second

memory limit per test

256 megabytes

input

standard input

output

standard output

The student council is preparing for the relay race at the sports festival.

The council consists of n members. They will run one after the other in the
race, the speed of member i is si. The discrepancy di of the i-th stage is the
difference between the maximum and the minimum running speed among the first i
members who ran. Formally, if ai denotes the speed of the i-th member who
participated in the race, then di=max(a1,a2,…,ai)−min(a1,a2,…,ai).

You want to minimize the sum of the discrepancies d1+d2+⋯+dn. To do this, you
are allowed to change the order in which the members run. What is the minimum
possible sum that can be achieved?

Input

The first line contains a single integer n (1≤n≤2000)  — the number of members
of the student council.

The second line contains n integers s1,s2,…,sn (1≤si≤109)  – the running
speeds of the members.

Output

Print a single integer  — the minimum possible value of d1+d2+⋯+dn after
choosing the order of the members.

Examples

Input

Copy

    
    
    3
    3 1 2
    

Output

Copy

    
    
    3
    

Input

Copy

    
    
    1
    5
    

Output

Copy

    
    
    0
    

Input

Copy

    
    
    6
    1 6 3 3 6 3
    

Output

Copy

    
    
    11
    

Input

Copy

    
    
    6
    104 943872923 6589 889921234 1000000000 69
    

Output

Copy

    
    
    2833800505
    

Note

In the first test case, we may choose to make the third member run first,
followed by the first member, and finally the second. Thus a1=2, a2=3, and
a3=1. We have:

  * d1=max(2)−min(2)=2−2=0. 
  * d2=max(2,3)−min(2,3)=3−2=1. 
  * d3=max(2,3,1)−min(2,3,1)=3−1=2. 

The resulting sum is d1+d2+d3=0+1+2=3. It can be shown that it is impossible
to achieve a smaller value.

In the second test case, the only possible rearrangement gives d1=0, so the
minimum possible result is 0.

The problem statement has recently been changed. View the changes.

×

D. Binary Literature

time limit per test

1 second

memory limit per test

256 megabytes

input

standard input

output

standard output

A bitstring is a string that contains only the characters 0 and 1.

Koyomi Kanou is working hard towards her dream of becoming a writer. To
practice, she decided to participate in the Binary Novel Writing Contest. The
writing prompt for the contest consists of three bitstrings of length 2n. A
valid novel for the contest is a bitstring of length at most 3n that contains
at least two of the three given strings as subsequences.

Koyomi has just received the three prompt strings from the contest organizers.
Help her write a valid novel for the contest.

A string a is a subsequence of a string b if a can be obtained from b by
deletion of several (possibly, zero) characters.

Input

The first line contains a single integer t (1≤t≤104) — the number of test
cases.

The first line of each test case contains a single integer n (1≤n≤105).

Each of the following three lines contains a bitstring of length 2n. It is
guaranteed that these three strings are pairwise distinct.

It is guaranteed that the sum of n across all test cases does not exceed 105.

Output

For each test case, print a single line containing a bitstring of length at
most 3n that has at least two of the given bitstrings as subsequences.

It can be proven that under the constraints of the problem, such a bitstring
always exists.

If there are multiple possible answers, you may output any of them.

Example

Input

Copy

    
    
    2
    1
    00
    11
    01
    3
    011001
    111010
    010001
    

Output

Copy

    
    
    010
    011001010
    

Note

In the first test case, the bitstrings 00 and 01 are subsequences of the
output string: 010 and 010. Note that 11 is not a subsequence of the output
string, but this is not required.

In the second test case all three input strings are subsequences of the output
string: 011001010, 011001010 and 011001010.

The problem statement has recently been changed. View the changes.

×

E. Almost Sorted

time limit per test

2 seconds

memory limit per test

256 megabytes

input

standard input

output

standard output

Seiji Maki doesn't only like to observe relationships being unfolded, he also
likes to observe sequences of numbers, especially permutations. Today, he has
his eyes on almost sorted permutations.

A permutation a1,a2,…,an of 1,2,…,n is said to be almost sorted if the
condition ai+1≥ai−1 holds for all i between 1 and n−1 inclusive.

Maki is considering the list of all almost sorted permutations of 1,2,…,n,
given in lexicographical order, and he wants to find the k-th permutation in
this list. Can you help him to find such permutation?

Permutation p is lexicographically smaller than a permutation q if and only if
the following holds:

  * in the first position where p and q differ, the permutation p has a smaller element than the corresponding element in q.

Input

The first line contains a single integer t (1≤t≤1000) — the number of test
cases.

Each test case consists of a single line containing two integers n and k
(1≤n≤105, 1≤k≤1018).

It is guaranteed that the sum of n over all test cases does not exceed 105.

Output

For each test case, print a single line containing the k-th almost sorted
permutation of length n in lexicographical order, or −1 if it doesn't exist.

Example

Input

Copy

    
    
    5
    1 1
    1 2
    3 3
    6 5
    3 4
    

Output

Copy

    
    
    1 
    -1
    2 1 3 
    1 2 4 3 5 6 
    3 2 1 
    

Note

For the first and second test, the list of almost sorted permutations with n=1
is {[1]}.

For the third and fifth test, the list of almost sorted permutations with n=3
is {[1,2,3],[1,3,2],[2,1,3],[3,2,1]}.

The problem statement has recently been changed. View the changes.

×

F. Complete the MST

time limit per test

3 seconds

memory limit per test

256 megabytes

input

standard input

output

standard output

As a teacher, Riko Hakozaki often needs to help her students with problems
from various subjects. Today, she is asked a programming task which goes as
follows.

You are given an undirected complete graph with n nodes, where some edges are
pre-assigned with a positive weight while the rest aren't. You need to assign
all unassigned edges with non-negative weights so that in the resulting fully-
assigned complete graph the XOR sum of all weights would be equal to 0.

Define the ugliness of a fully-assigned complete graph the weight of its
minimum spanning tree, where the weight of a spanning tree equals the sum of
weights of its edges. You need to assign the weights so that the ugliness of
the resulting graph is as small as possible.

As a reminder, an undirected complete graph with n nodes contains all edges
(u,v) with 1≤u<v≤n; such a graph has n(n−1)2 edges.

She is not sure how to solve this problem, so she asks you to solve it for
her.

Input

The first line contains two integers n and m (2≤n≤2⋅105,
0≤m≤min(2⋅105,n(n−1)2−1))  — the number of nodes and the number of pre-
assigned edges. The inputs are given so that there is at least one unassigned
edge.

The i-th of the following m lines contains three integers ui, vi, and wi
(1≤ui,vi≤n, u≠v, 1≤wi<230), representing the edge from ui to vi has been pre-
assigned with the weight wi. No edge appears in the input more than once.

Output

Print on one line one integer  — the minimum ugliness among all weight
assignments with XOR sum equal to 0.

Examples

Input

Copy

    
    
    4 4
    2 1 14
    1 4 14
    3 2 15
    4 3 8
    

Output

Copy

    
    
    15
    

Input

Copy

    
    
    6 6
    3 6 4
    2 4 1
    4 5 7
    3 4 10
    3 5 1
    5 2 15
    

Output

Copy

    
    
    0
    

Input

Copy

    
    
    5 6
    2 3 11
    5 3 7
    1 4 10
    2 4 14
    4 3 8
    2 5 6
    

Output

Copy

    
    
    6
    

Note

The following image showcases the first test case. The black weights are pre-
assigned from the statement, the red weights are assigned by us, and the
minimum spanning tree is denoted by the blue edges.

![](https://espresso.codeforces.com/a7a280c2f88b120ff0839966d25330c968719a1c.png)

  

Codeforces (c) Copyright 2010-2021 Mike Mirzayanov

The only programming contests Web 2.0 platform

